const AY_DAC_TABLE = [
    0.0, 0.0,
    0.00999465934234, 0.00999465934234,
    0.0144502937362, 0.0144502937362,
    0.0210574502174, 0.0210574502174,
    0.0307011520562, 0.0307011520562,
    0.0455481803616, 0.0455481803616,
    0.0644998855573, 0.0644998855573,
    0.107362478065, 0.107362478065,
    0.126588845655, 0.126588845655,
    0.20498970016, 0.20498970016,
    0.292210269322, 0.292210269322,
    0.372838941024, 0.372838941024,
    0.492530708782, 0.492530708782,
    0.635324635691, 0.635324635691,
    0.805584802014, 0.805584802014,
    1.0, 1.0
  ]
  
  const YM_DAC_TABLE = [
    0.0, 0.0,
    0.00465400167849, 0.00772106507973,
    0.0109559777218, 0.0139620050355,
    0.0169985503929, 0.0200198367285,
    0.024368657969, 0.029694056611,
    0.0350652323186, 0.0403906309606,
    0.0485389486534, 0.0583352407111,
    0.0680552376593, 0.0777752346075,
    0.0925154497597, 0.111085679408,
    0.129747463188, 0.148485542077,
    0.17666895552, 0.211551079576,
    0.246387426566, 0.281101701381,
    0.333730067903, 0.400427252613,
    0.467383840696, 0.53443198291,
    0.635172045472, 0.75800717174,
    0.879926756695, 1.0
  ]

export class AY_3_8910 {
    left: number;
    right: number;

    registers = new Uint8Array(18);

    constructor(private clock: number, private sampleRate: number) {
       this.left = 0;
       this.right = 0;
    }

    getTempo(chan: number) {
        return this.registers[2 * chan] + ((this.registers[2 * chan + 1] & 0xf) << 8);
    }

    getFrequency(chan: number): number {
        return 3579545 / (32 * (this.getTempo(chan) + 1));
    }

    process(): void {

    }

    setRegister(register: number, value: number) {
        this.registers[register] = value;
    }
}